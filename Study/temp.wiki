== C Language ==

1.windows下的zip文件到ubuntu下解压出来文件名字是乱码。

2.date设置时间的用法。

3.c标识符最大长度

4.return exit具体性质，用途。 

5.makefile中如何对头文件的时间戳也敏感。

6.signed char i = 0xff;%d = -1正确; %x = 0xffffffff为什么前面的24位也全部是1啊？;
	char 有符号正数是在127以上溢出的，<=127就是都是对的，大于等于128第八位符号位就被冲掉了溢出成负数了。
	答：这是因为printf类型提升了。

7.变量的定义与声明、初始化。
	两个文件中声明同名字的int型变量，不包含，加或不加extern。
	内存：全局初始化区，全局未初始化区。初始化的放在data段，未初始化的放在bss段（初始化为0的也可能放在bss段）
	/* ------------ cc -c file.c -------------------------------- */
		int i;		/* 全局变量非初始化赋值,默认为0，内存为0 */
		i = 100; 	/* warning: data definition has no type or storage class [enabled by default]
					 * 这里说:数据定义没有类型和存储类 
					 * 说明上面int i;只是声明.而且全局不能在函数外面赋值，只能在声明的时候初始化
					 */
	/* ---------------------------------------------------------- */
		int i;
		int main()
		{
			i = 100; /* 没有任何警告和错误 */
			return 0;
		}	
	/* ---------------------------------------------------------- */

	函数不进行外部声明，或不加extern进行声明（没有返回值的函数如何声明），可以链接库使用。
	无返回值的函数的声明。

8.多参数vt_list vsnprintf

9.位域、位段规则，与跨字节现象。

10.大小端是字节序，大小段的bcd8421码，是4bit序？？？？

11.git 分支和远程仓库

12.int数组定义 初始化，赋值。

13.#define CVMX_MT_CRC_POLYNOMIAL(val)         asm volatile ("dmtc2 %[rt],0x4200" : : [rt] "d" (val))

14.按位寻址，按字节寻址

15.线程 进程资源问题; C语言五大存储区域属性 与  汇编代码段、数据段的关系 
#------Cavium
16.整体构架、锁、原子操作、锁总线。

17.多核多线程

18.uboot,juson architect,flash,cpu,pci,fpa-buffer-pool,bootmem

19.CVMX_USE_1_TO_1_TLB_MAPPINGS,xkphys,kuseg,映射设置和物理地址、虚拟地址转换。

20.cvmx_fpa_alloc,cvmx_bootmem_alloc_name,关系和地址属性 (P181)
	The size of the L1 Dcache is also affected by the amount of Dcache set aside for cvmseg(10.6).

21.ELF File--->in-memory images(contain system memory allocated for the stack and heap),mapping or no mapping
	11.3.2 256的限制 如果映射了，就得注意shared段的大小，那么shared存在哪里和是否映射的影响。
	14.2.1 讲了原因,理解下
22.OCTEON有分类这一个原则，fast slow:
	normal packet processing(fast path),and exception processing(slow path).
23.L2 Cache分区和上锁 (Hardware Reference)

24.Note that the I/O space is selected if bit 48 of the physical address is “1”. Physical memory is selected if bit 48 of the physical address is "0"
25.167:10.4.1讲了unmapped segments分别是64位的xkphys，和32位的kseg0 kseg1,P197也有图可以参考
	cvmx_fpa_alloc() use pointer arguments and return values, not addresses	
	所谓MAPPING,就是物理地址按照虚拟地址进行映射，虚拟的是0，物理的也指向零。
	默认是1，就是默认MAPPING，地址转换就没有用了。
	如果不映射，SE-S通过skphys或者内嵌汇编指令获得内存地址。
26. load sets,cpumask
27.cvmx_bootmem_find_named_block(name)) 返回值的结构体

28.se system memory access P194

29.rwlock 和spinlock的区别，为什么以把named_block的list_head加上了读写锁，那么为什么里面还要用原子操作实现基数的增加和删除，
	c语言的malloc，无法用于申请FPA，那么boot_mem_alloc的内存和FPA缓冲的关系体现在哪里？
30.cvmx_fau_atomic_add64?
#End of Cavium
31.网络报文中字符串不用转大小端？ 单字节不需要，多字节需要。ip地址也是大端(字节序,共四个字节)
网络字节导入到char数组中ip是：
IP: 	0a 07 f9 20	网络字节序是大端，高位字节存储在前面低位地址，所以对应IP是 0a.07.f9.20
	在char数组中前面还是低位地址，这时候*(uint32_t *)addr时候，按照数组中地址顺序，前面还是低位地址，但是字节序是小端，存储的是低位的字节所以打印出来ip变成:20.f9.07.0a
ACSII:	ctwap@mycdma.cn 网络字节,说明大端时候字符串的前面字符是存储在低位地址，这和小端的存储方式一致,可以这么理解吗？

32.cpu 取指，寻址过程，和地址对齐的关系？



